name: React S3 Build
on:
  push:
    branches:   # main branch에서 push event가 일어난 경우에만
      - main

env: # 여러 스텝에서 사용하는 변수들을 한 곳으로 모아서 정의
  S3_BUCKET_NAME: sodev-s3 # S3의 버킷이름
  CODE_DEPLOY_APPLICATION_NAME: CODE-DEPLOY-SODEV # 코드 디플로이 어플리케이션 이름
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: CODE-DEPLOY-SODEV-GROUP # 코드 디플로이 어플리케이션 그룹 이름
  PROJECT_NAME: sodev-project

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout # 스텝 이름을 지정하여 알아볼 수 있게 함
        uses: actions/checkout@v2 # 정의한 actions 동작으로 checkout함
  
      - name: Cache node modules    # node modules 캐싱
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
    
      - name: Install Dependencies    # 의존 파일 설치
        run: npm install

      - name: Build   # React Build
        run: npm run build

      - name: Configure AWS credentials # AWS 접근 권한 등록해주는 부분
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # 깃허브 프로젝트 리포지토리의 Actions secrets에 변수로 저장한 값을 사용
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3 # 위에서 압축시킨 프로젝트 결과 파일을 S3에 업로드 하는 부분
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy # 최종적으로 Code Deploy Agent를 사용해서 S3 에 올라가있는 파일을 가져와서 배포하는 부분
        run: | # 코드가 길어져서 엔터를 치겠다는 하나의 표현방식
          aws deploy create-deployment \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
